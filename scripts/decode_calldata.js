const ethers = require("ethers");

// Updated calldata to decode
const calldata = "0x415565b00000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000001bfd67037b42cf73acf2047067bd4f2c47d9bfd600000000000000000000000000000000000000000000007317caafdb77bead4c00000000000000000000000000000000000000000000000000000000003d3a4a00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000005e000000000000000000000000000000000000000000000000000000000000006e0000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000520000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000001bfd67037b42cf73acf2047067bd4f2c47d9bfd6000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000004e000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000048000000000000000000000000000000000000000000000007317caafdb77bead4c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004e00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000005c13088caf92ff3f2a0000000000000000000000000000000000000000000000000000000000310dc5000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000420d500b1d8e8ef31e21c99d1db9a6444d3adf12700001f47ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000001704c2232be4bf6e2300000000000000000000000000000000000000000000000000000000000c4410000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c0586156400000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002b0d500b1d8e8ef31e21c99d1db9a6444d3adf12700001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001bfd67037b42cf73acf2047067bd4f2c47d9bfd6000000000000000000000000000000000000000000000000000000000000178b000000000000000000000000ad01c20d5886137e056775af56915de824c8fce5000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd000000000000000000000000100000000000000000000000000000000000001100000000000000000000000000000000f7d819fb4f6b8e8199c154f9f40b59a3";

// Manually decode the calldata
const functionSelector = calldata.slice(0, 10);
const inputToken = `0x${calldata.slice(10, 74).slice(24)}`;
const outputToken = `0x${calldata.slice(74, 138).slice(24)}`;
const inputTokenAmount = BigInt(`0x${calldata.slice(138, 202)}`).toString();
const minOutputTokenAmount = BigInt(`0x${calldata.slice(202, 266)}`).toString();

// Decode the transformations (dynamic bytes array)
const transformationsOffset = parseInt(`0x${calldata.slice(266, 330)}`, 16);
const transformationsLength = parseInt(`0x${calldata.slice(transformationsOffset * 2 + 2, transformationsOffset * 2 + 66)}`, 16);
const transformations = calldata.slice(transformationsOffset * 2 + 66, transformationsOffset * 2 + 66 + transformationsLength * 2);

console.log("Decoded calldata:", {
  functionSelector,
  inputToken,
  outputToken,
  inputTokenAmount,
  minOutputTokenAmount,
  transformations,
});
